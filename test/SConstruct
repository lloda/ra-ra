# -*- mode: Python -*-
# -*- coding: utf-8 -*-

# (c) Daniel Llorens - 2015-2016

# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option) any
# later version.

# SConstruct for ra/test
# FIXME Shared pieces with {examples,bench,doc}/SConstruct

import os, string, atexit
from colorama import Fore, Back, Style
from os.path import join, abspath
import imp
ra = imp.load_source('ra', '../ra.py')

# FIXME pick BLAS flags from here.
try:
    Import('top')
except:
    top = {}

vars = Variables()
vars.AddVariables(PathVariable('variant_dir', 'build directory', '.', PathVariable.PathIsDirCreate))

env = Environment(options=vars,
                  ENV=dict([(k, os.environ[k] if k in os.environ else '')
                            for k in ['PATH', 'HOME', 'TERM', 'LD_RUN_PATH', 'DYLD_LIBRARY_PATH',
                                      'RPATH', 'LIBRARY_PATH', 'TEXINPUTS', 'GCC_COLORS', 'BOOST_ROOT',
                                      'RA_USE_BLAS']]))
variant_dir = env['variant_dir']

for var, default in [('CC', 'gcc'), ('CXX', 'g++'), ('FORTRAN', 'gfortran')]:
    ra.take_from_environ(env, var, default=default)
for var in ['FORTRANFLAGS', 'LINKFLAGS', 'CCFLAGS', 'CXXFLAGS']:
    ra.take_from_environ(env, var, wrapper=string.split)
for var in ['RPATH', 'LIBPATH']:
    ra.take_from_environ(env, var, wrapper=lambda x: [x])

arch = os.popen('../config.guess').read()

if arch.find('86-apple-darwin') >= 0:
    archflags=['-march=native', '-Wa,-q']
    ld_blas = {'LINKFLAGS': ' -framework vecLib ', 'LIBS': []}
else:
    archflags=['-march=native']
    ld_blas = {'LINKFLAGS': '', 'LIBS': ['blas']}

env.Prepend(CPPPATH=['..', '.'],
            CCFLAGS=archflags if str(env['CCFLAGS']).strip()=='' else '',
            CXXFLAGS=['-std=c++1z', '-Wall', '-Werror', '-fdiagnostics-color=always', '-Wno-unknown-pragmas',
                      '-finput-charset=UTF-8', '-fextended-identifiers',
                      '-Wno-error=strict-overflow',
                      #'-Wconversion',
                      # '-funsafe-math-optimizations', # TODO Test with this.
                  ])

env_blas = env.Clone()
if 'RA_USE_BLAS' in env['ENV'] and env['ENV']['RA_USE_BLAS']=='1':
    print("[%s] BLAS will be used." % Dir('.').path)
    env_blas.Append(CPPDEFINES={'RA_USE_BLAS': 1})
    env_blas.Append(LINKFLAGS=ld_blas['LINKFLAGS'])
    env_blas.Append(LIBS=ld_blas['LIBS'])
else:
    print("[%s] BLAS won't be used." % Dir('.').path)

if 'skip_summary' not in top:
    atexit.register(lambda: ra.print_summary(GetBuildFailures, 'ra/test'))

tester = ra.to_test_ra(env, variant_dir)

[tester(test)
 for test in ['test-ra-0', 'test-ra-1', 'test-ra-2', 'test-ra-3', 'test-ra-4',
              'test-ra-6', 'test-ra-8', 'test-ra-9',
              'test-types', 'test-io', 'test-from', 'test-nested', 'test-owned',
              'test-ownership', 'test-ply', 'test-small', 'test-large',
              'test-return-expr', 'test-reduction', 'test-frame-match',
              'test-compatibility', 'test-dual', 'test-ra-dual', 'test-stl-compat',
              'test-where', 'test-tuplelist', 'test-wedge-product', 'test-operators',
              'test-tensorindex', 'test-explode-collapse', 'test-wrank',
              'test-optimize', 'test-reshape', 'test-concrete', 'test-bench',
              # 'test-small-iterator',
              # 'test-end'
          ]]

tester('test-ra-10', target='test-ra-10a', cxxflags=['-O3'], cppdefines={'RA_CHECK_BOUNDS': '0'})
tester('test-ra-10', target='test-ra-10b', cxxflags=['-O1'], cppdefines={'RA_CHECK_BOUNDS': '0'})
tester('test-ra-10', target='test-ra-10c', cxxflags=['-O3'], cppdefines={'RA_CHECK_BOUNDS': '1'})
tester('test-ra-10', target='test-ra-10d', cxxflags=['-O1'], cppdefines={'RA_CHECK_BOUNDS': '1'})
