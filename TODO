RA -*- mode: org; -*-

help: [C-uc .] insert timestamp [C-cc] flip checkbox [C-uucc] partial flip [M-RET] continue list
checkbox [C-ct] flip TODO

#+STARTUP: logdone

* TODO [1/6]
  - [-] Bugs [1/7]
    - [ ] ra::Small<real, 3, 3, 3>() benchmark in bench-dot.cc has op 10x worse
      than indexed
      - Tried is_constant_eval in c++20 but didn't work out as I hoped.
    - [X] size_s, rank_s in Ryn:: are broken [ra07]
    - [ ] ambiguity / bad init in nested constructors [ra45]
    - [ ] subscripting inconsistencies; for example, if `A` is rank>1 and `i` is
      rank 1, then `A(i)` will return a nested expression instead of preserving
      `A`'s rank.
    - [ ] beatable subscripts are not beaten if mixed with non-beatable
      subscripts. E.g. in A(vector, iota, vector) the iota isn't beaten.
    - [ ] be namespace clean except for possibly real.hh, complex.hh.
    - [ ] make iter work with w/rank.
  - [-] Features [1/5]
    - [ ] Iota is both vector-like object and iterator. Split into two types?
    - [ ] View::p is not const because it's used as sliding window (cell_iterator). Split into two types?
    - [ ] Should be able to reshape iota (??) or show examples with TensorIndex,
      maybe. One idea is to generalize View (so View<Iota>, etc.) which is
      something that newra does. But as long as Container is parent of View,
      conversion of (Container const &) into (View const &) forces us to have
      const/nonconst overloads in View (instead of just relying on the constness
      of (View::p). This is just a mess when View::p isn't a pointer.
      - [ ] Fix relationship between Container and View [0/5]
        - [ ] forward const/nonconst overloads to View or ViewConst from here.
        - [ ] remove inheritance relationship of Container on View
        - [ ] add const/nonconst casts of Container to View or ViewConst
        - [ ] remove const overloads from View::operator()
        - [ ] make View be View<pointer> and not View<value_type>
    - [ ] Should be able to turn ravel iterators (e.g. View::begin()) into array
      iterators. Ptr() doesn't work for that. Or to obtain STLIterator from any
      array iterator. That may come of merging STLIterator with
      ply_index/ply_ravel.
    - [ ] gemv(conj(a), b) should work. Beat View-like selectors down an Expr??
    - [ ] port some of the View ops to generic ArrayIterator. reverse,
          transpose, etc. seem easy enough. Only it kind of bothers me that they
          need their own Expr-like types while on Views it's just a one time
          op. Propagating ops down Expr into leaf Views (a kind of beating) would be
          better.
    - [X] Support operator <=> <2020-09-15 Tue 13:50>
      - https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96278 is annoying
  - [X] Error report, debugging [3/3]
    - [X] Optionally throw instead of abort on bounds checks, etc. cf. test/check-runtime.cc
      * This was fixed between v8 and v10, see examples/throw.cc.
    - [X] Static check on Small constructors e.g. real3 {1, 2, 3}. Cf big.hh:513 init<SS>(SS const & s).
      - [X] for Container constructors
      - [X] for Small constructors
    - [X] General static check on prefix matching <2019-02-06 Wed 12:06>
  - [-] Building, tests [3/5]
    - [X] Build docs with cmake
    - [X] Support RA_USE_BLAS with cmake (linux)
    - [X] Support RA_USE_BLAS with cmake (mac) <2018-12-07 Fri 16:33>
    - [ ] Make cmake tests respect dependences and able to be run independently.
    - [ ] Test for expected compilation errors (static_assert, etc) [ra42].
  - [ ] Documentation [0/3]
    - [ ] Complete section on internals
    - [ ] Complete section on other languages, libraries
    - [ ] Describe xreferenced issues in doc ([raxx], etc.)
  - [ ] Other [0/1]
    - [ ] Support tuple as a kind of foreign vector
      - [ ] Iterator type for tuple (like Vector for std::vector).
      - [ ] Appropriate ply. Possibly restrict it to rank 1.

* Numbered issues throughout the source [ra··]
  1. [ ]
  2. [ ]
  3. [ ]
  4. [ ]
  5. [ ]
  6. [ ]
  7. [ ]
  8. [ ]
  9. [ ] Unassigned
  10. [ ] Unassigned
  11. [ ]
  12. [ ]
  13. [ ]
  14. [ ]
  15. [ ]
  16. [ ]
  17. [ ]
  18. [ ]
  19. [ ]
  20. [ ]
  21. [ ]
  22. [ ]
  23. [ ]
  24. [ ]
  25. [ ]
  26. [ ]
  27. [ ]
  28. [ ]
  29. [ ]
  30. [ ]
  31. [ ]
  32. [ ]
  33. [ ]
  34. [ ]
  35. [ ]
  36. [ ]
  37. [ ]
  38. [ ]
  39. [ ]
  40. [ ]
  41. [ ]
  42. [ ]
  43. [ ] Unassigned
  44. [ ]
  45. [ ]
  46. [ ]
