# -*- mode: Python -*-
# -*- coding: utf-8 -*-

# (c) Daniel Llorens - 2016

# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option) any
# later version.

# SConstruct for ra-ra/doc
# todo Shared pieces with examples/SConstruct and test/SConstruct

import os, atexit
from colorama import Fore, Back, Style
from os.path import join, abspath

try:
    Import('top')
except:
    top = {}

# put into library...
def take_from_environ(env, var, wrapper=(lambda x: x), default=None):
    if var in os.environ and os.environ[var]!='':
        env[var] = wrapper(os.environ[var])
    elif default is not None:
        env[var] = default

vars = Variables()
vars.AddVariables(PathVariable('variant_dir', 'build directory', '.', PathVariable.PathIsDirCreate))

env = Environment(options=vars,
                  BUILDERS={'INFOBuilder' : Builder(action = '$MAKEINFO < $SOURCES > $TARGET',
                                                    suffix = '.info',
                                                    src_suffix = '.texi'),
                            'HTMLBuilder' : Builder(action = '$MAKEINFO --html --no-split < $SOURCES > $TARGET',
                                                    suffix = '.html',
                                                    src_suffix = '.texi')})
variant_dir = env['variant_dir']

for var, default in [('MAKEINFO', 'makeinfo')]:
    take_from_environ(env, var, default=default)

def print_summary():
    from SCons.Script import GetBuildFailures
    test_item_tally = 0
    test_tally = 0
    build_tally = 0

    print '\n' + Style.BRIGHT + 'Summary for ra/doc' + Style.RESET_ALL + '\n--------'
    for bf in GetBuildFailures():
        if str(bf.node).endswith('.check') and (bf.status > 0):
            print (Style.BRIGHT + Fore.RED + '%s ' + Style.RESET_ALL + Fore.RESET + ' failed (%d)') \
                % (bf.node, bf.status)
            test_item_tally += bf.status
            test_tally += 1
        else:
            print (Style.BRIGHT + Fore.YELLOW + '%s ' + Style.RESET_ALL + Fore.RESET + ' failed (%s)') \
                % (bf.node, bf.errstr)
            build_tally += 1

    print '%d targets failed to build.' % build_tally
    print '%d tests failed with %d total failures.' % (test_tally, test_item_tally)

if 'skip_summary' not in top:
    atexit.register(print_summary)

env.INFOBuilder(target = 'ra-ra.info', source = 'ra-ra.texi')
env.HTMLBuilder(target = 'ra-ra.html', source = 'ra-ra.texi')
